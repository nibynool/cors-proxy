service: AgCorsProxy

package:
  individually: true
  exclude:
    - '.*'
    - '.*/**'
    - 'config/**'
    - 'public/**'
    - 'scaffolds/**'
    - 'scripts/**'
    - 'source/**'
    - 'themes/**'
    - '*'
  include:
    - 'config/shared/sls/src/**'
    - 'config/sls/src/**'


plugins:
  - serverless-offline
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.shared.region}
  stackTags:
    COSTCENTER: alphageek
    SERVICE: ${self:service}
  environment:
    REGION: ${opt:region, 'us-east-1'}
    STAGE: ${self:custom.shared.stage}
    SERVICE: ${self:service.name}
    STACK: ${self:custom.shared.stackName}
    AUTHORISED_HOSTS: ${self:custom.shared.domains.${self:custom.shared.stage}, self:custom.shared.domains.default}
  versionFunctions: true
  stackName: ${self:custom.shared.stackName}
  stage: ${self:custom.shared.stage}
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ":"
          - - arn:aws:ssm
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - parameter/AgWafBasicAuth*
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ":"
          - - arn:aws:ssm
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - parameter/AgWafUserAgent

custom:
  shared: ${file(config/shared/sls/custom.yml)}
  customDomain: ${file(config/resources/customDomain.yml)}

functions:
  - ${file(config/shared/sls/functions/basicauth.yml)}
  - ${file(config/functions/handler.yml)}
